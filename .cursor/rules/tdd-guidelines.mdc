---
description: 
globs: 
alwaysApply: false
---
---
description: 테스트 주도 개발(TDD) 사이클과 테스트 작성 가이드라인
alwaysApply: true
---

## 테스트 주도 개발(TDD) 가이드라인

### TDD 사이클 (Red-Green-Refactor)
1. **Red**: 실패하는 테스트를 먼저 작성합니다
2. **Green**: 테스트를 통과하는 최소한의 코드를 작성합니다
3. **Refactor**: 코드를 리팩토링하여 품질을 개선합니다

### 테스트 작성 원칙
- **AAA 패턴**: Arrange(준비) - Act(실행) - Assert(검증) 구조를 따릅니다
- **Given-When-Then**: 주어진 상황 - 특정 행동 - 예상 결과로 테스트 시나리오를 작성합니다
- **F.I.R.S.T 원칙**: Fast(빠름), Independent(독립적), Repeatable(반복가능), Self-validating(자가검증), Timely(적시)

### 테스트 명명 규칙
- 테스트 메서드명: `should_ExpectedBehavior_When_StateUnderTest`
- 예: `should_ReturnTrue_When_ValidEmailProvided`
- 한국어: `주어진상황_실행동작_예상결과` 형식 사용 가능

### 테스트 구조
```
describe('클래스명 또는 기능명', () => {
  describe('메서드명', () => {
    it('should 예상결과 when 조건', () => {
      // Arrange
      // Act  
      // Assert
    });
  });
});
```

### 테스트 커버리지
- 단위 테스트: 개별 메서드나 함수 단위로 테스트
- 통합 테스트: 여러 컴포넌트 간의 상호작용 테스트
- 엔드투엔드 테스트: 사용자 시나리오 기반 전체 시스템 테스트
- 최소 80% 이상의 코드 커버리지를 목표로 합니다

### 테스트 더블(Test Double)
- **Mock**: 호출 여부와 방법을 검증하는 가짜 객체
- **Stub**: 미리 정의된 응답을 반환하는 가짜 객체
- **Spy**: 실제 객체의 메서드 호출을 감시하는 객체
- **Fake**: 실제 구현을 단순화한 가짜 객체

### 테스트 데이터
- **Object Mother 패턴**: 테스트 객체 생성을 위한 팩토리 클래스 활용
- **Builder 패턴**: 복잡한 테스트 객체 생성을 위한 빌더 패턴 사용
- 하드코딩된 테스트 데이터보다는 의미있는 변수명 사용

### 테스트 주의사항
- 테스트 간 의존성을 만들지 않습니다
- 외부 의존성(DB, API 등)은 격리시킵니다
- 테스트 코드도 프로덕션 코드와 같은 품질을 유지합니다
- 하나의 테스트는 하나의 단언(assertion)만 포함하는 것이 이상적입니다

### 리팩토링 원칙
- 테스트가 통과하는 상태에서만 리팩토링을 진행합니다
- 작은 단위로 리팩토링하고 매번 테스트를 실행합니다
- 중복 코드를 제거하고 코드의 가독성을 개선합니다
