---
description: 
globs: 
alwaysApply: false
---
---
description: OOP와 TDD를 통합한 개발 워크플로우 가이드라인
alwaysApply: true
---

## OOP + TDD 통합 개발 워크플로우

### 클래스 개발 사이클
1. **인터페이스 설계**: 클래스의 공개 인터페이스를 먼저 설계합니다
2. **테스트 작성**: 인터페이스 기반으로 실패하는 테스트를 작성합니다
3. **구현**: SOLID 원칙을 따라 최소한의 구현을 작성합니다
4. **리팩토링**: 객체지향 원칙에 맞게 코드를 개선합니다

### 의존성 주입과 테스트
- 생성자를 통한 의존성 주입으로 테스트 가능한 코드를 작성합니다
- 인터페이스를 활용하여 Mock 객체로 의존성을 대체합니다
- 팩토리 패턴이나 DI 컨테이너를 사용하여 객체 생성을 관리합니다

### 계층별 테스트 전략
#### Domain Layer (도메인 계층)
- 비즈니스 로직을 담은 엔티티와 값 객체를 단위 테스트로 검증
- 외부 의존성 없이 순수한 객체지향 코드로 작성
- 도메인 이벤트와 비즈니스 규칙을 테스트로 명세화

#### Application Layer (응용 계층)
- 유스케이스별로 통합 테스트 작성
- Mock을 사용하여 인프라스트럭처 의존성 격리
- 트랜잭션과 예외 처리 시나리오 테스트

#### Infrastructure Layer (인프라 계층)
- 데이터베이스, 외부 API 등의 연동 테스트
- 테스트용 인메모리 데이터베이스 활용
- 계약 테스트를 통한 외부 서비스 호환성 검증

### 리팩토링 시 주의사항
- 리팩토링 전후 모든 테스트가 통과해야 합니다
- 인터페이스 변경 시 클라이언트 코드에 미치는 영향을 고려합니다
- 상속 구조 변경 시 LSP(리스코프 치환 원칙) 위반 여부를 확인합니다

### 코드 리뷰 체크리스트
- [ ] SOLID 원칙을 준수하는가?
- [ ] 모든 공개 메서드에 대한 테스트가 있는가?
- [ ] 테스트 커버리지가 80% 이상인가?
- [ ] 의존성이 적절히 주입되고 있는가?
- [ ] 예외 처리가 적절히 되어 있는가?
- [ ] 네이밍이 명확하고 일관성 있는가?

### 패키지 구조 예시
```
src/
├── domain/
│   ├── entities/
│   ├── value-objects/
│   └── repositories/
├── application/
│   ├── services/
│   └── use-cases/
├── infrastructure/
│   ├── persistence/
│   └── external/
└── presentation/
    ├── controllers/
    └── dto/

test/
├── unit/
├── integration/
└── e2e/
```

### 성능과 품질의 균형
- 과도한 추상화보다는 현재 요구사항에 맞는 적절한 설계를 선택합니다
- 테스트 실행 시간이 너무 길어지지 않도록 관리합니다
- 코드 복잡도와 유지보수성 사이의 균형을 고려합니다
