---
description: 
globs: 
alwaysApply: false
---
---
description: 객체지향 프로그래밍(OOP) 원칙과 설계 가이드라인
alwaysApply: true
---

## 객체지향 프로그래밍 가이드라인

### SOLID 원칙 준수
- **단일 책임 원칙(SRP)**: 각 클래스는 하나의 책임만 가져야 합니다
- **개방-폐쇄 원칙(OCP)**: 확장에는 열려있고 수정에는 닫혀있어야 합니다
- **리스코프 치환 원칙(LSP)**: 하위 타입은 상위 타입으로 치환 가능해야 합니다
- **인터페이스 분리 원칙(ISP)**: 클라이언트는 불필요한 인터페이스에 의존하지 않아야 합니다
- **의존성 역전 원칙(DIP)**: 구체화가 아닌 추상화에 의존해야 합니다

### 클래스 설계 원칙
- 클래스명은 PascalCase로 명명하고 의미가 명확해야 합니다
- 메서드명은 camelCase로 동사형으로 작성합니다
- 속성은 private로 설정하고 필요시 getter/setter 제공
- 생성자에서 필수 의존성을 주입받도록 합니다
- 매직 넘버/문자열 대신 상수나 enum을 사용합니다

### 상속과 조합
- 상속보다는 조합(composition)을 우선 고려합니다
- 상속 계층은 3단계를 넘지 않도록 합니다
- 추상 클래스나 인터페이스를 적극 활용합니다

### 캡슐화
- 내부 구현을 숨기고 공개 인터페이스만 노출합니다
- 데이터와 그 데이터를 조작하는 메서드를 함께 배치합니다
- 불변성(immutability)을 최대한 유지합니다

### 코드 구조화
- 관련된 클래스들은 같은 패키지/모듈로 그룹화합니다
- 의존성 주입 패턴을 사용하여 결합도를 낮춥니다
- 팩토리 패턴, 전략 패턴 등 적절한 디자인 패턴을 활용합니다

### 예외 처리
- 비즈니스 로직에 맞는 커스텀 예외를 정의합니다
- 예외를 무시하거나 숨기지 않습니다
- 예외 메시지는 명확하고 구체적으로 작성합니다
